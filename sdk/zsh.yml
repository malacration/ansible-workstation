- hosts: localhost
  vars:
    - zsh_dependencies: []
    - zsh_plugins:
        - git
        - python
        - docker
        - pip
        - lein
        - command-not-found

  tasks:
  - name: Ensure Zsh with dependencies are installed
    apt:
      name: "{{ ['zsh'] + zsh_dependencies }}"
      state: present
      update_cache: yes
    become: true
  - name: Ensure zsh is the default shell "{{ ansible_env.USER.split('@')[0] }}"
    user:
      name: "{{ ansible_env.USER.split('@')[0] }}"
      shell: "/usr/bin/zsh"
    become: true
  - name: Download Oh My Zsh installation script
    get_url:
      url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
      dest: /tmp/install_ohmyzsh.sh
  - name: Run Oh My Zsh installation script
    command: sh /tmp/install_ohmyzsh.sh --unattended
    register: ohmyzsh_result
    failed_when: "'FAILED' in ohmyzsh_result.stderr"
  - name: Ensure desired Zsh plugins are activated
    lineinfile:
      path: ~/.zshrc
      regexp: '^plugins='
      line: "plugins=({{ zsh_plugins | join(' ') }})"
      create: yes
  - name: Assegurar que o script de autocomplete seja carregado pelo zsh
    blockinfile:
      path: "{{ lookup('env', 'HOME') }}/.zshrc"
      block: |
        if [ -d /etc/zsh_completion.d ]; then
          for file in /etc/zsh_completion.d/*; do
            source $file
          done
        fi
      marker: "# {mark} ANSIBLE MANAGED BLOCK for OpenShift autocomplete"
  - name: Activate virtual environment on cd
    blockinfile:
      path: "{{ lookup('env', 'HOME') }}/.zshrc"
      block: |
        function cd() {
          builtin cd "$@"
          if [[ -z "$VIRTUAL_ENV" ]] ; then
            ## If env folder is found then activate the vitualenv
              if [[ -d ./.venv ]] ; then
                source ./.venv/bin/activate
              fi
          else
            ## check the current folder belong to earlier VIRTUAL_ENV folder
            # if yes then do nothing
            # else deactivate
              parentdir="$(dirname "$VIRTUAL_ENV")"
              if [[ "$PWD"/ != "$parentdir"/* ]] ; then
                deactivate
              fi
          fi
        }
        # Automatically activate the virtual environment if it exists
        if [[ -d ./.venv ]]; then
          source ./.venv/bin/activate
        fi
      marker: "# {mark} ANSIBLE MANAGED BLOCK for virtualenv activation"


